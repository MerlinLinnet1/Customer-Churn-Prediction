# -*- coding: utf-8 -*-
"""CustomerChurnPrediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10Dc2Yp2BAAPj01inMsWoSq7rG1SZBK9O
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report
import seaborn as sn
# %matplotlib inline
df = pd.read_csv("/content/WA_Fn-UseC_-Telco-Customer-Churn.csv")
df.sample(5)
df.drop('customerID', axis='columns', inplace=True)
df['TotalCharges'] = pd.to_numeric(df['TotalCharges'], errors='coerce')
df1 = df.dropna(subset=['TotalCharges'])
tenure_churn_no = df1[df1.Churn == 'No'].tenure
tenure_churn_yes = df1[df1.Churn == 'Yes'].tenure
plt.xlabel("Tenure")
plt.ylabel("Number Of Customers")
plt.title("Customer Churn Prediction Visualization")
plt.hist([tenure_churn_yes, tenure_churn_no], color=['maroon', 'black'], label=['Churn=Yes', 'Churn=No'])
plt.legend()
plt.show()
mc_churn_no = df1[df1.Churn == 'No'].MonthlyCharges
mc_churn_yes = df1[df1.Churn == 'Yes'].MonthlyCharges
plt.xlabel("Monthly Charges")
plt.ylabel("Number Of Customers")
plt.title("Customer Churn Prediction Visualization")
plt.hist([mc_churn_yes, mc_churn_no], rwidth=0.95, color=['green', 'yellow'], label=['Churn=Yes', 'Churn=No'])
plt.legend()
plt.show()
df1.replace('No internet service', 'No', inplace=True)
df1.replace('No phone service', 'No', inplace=True)
yes_no_columns = ['Partner', 'Dependents', 'PhoneService', 'MultipleLines', 'OnlineSecurity',
                  'OnlineBackup', 'DeviceProtection', 'TechSupport', 'StreamingTV',
                  'StreamingMovies', 'PaperlessBilling', 'Churn']
for col in yes_no_columns:
    df1[col].replace({'Yes': 1, 'No': 0}, inplace=True)
df1['gender'].replace({'Female': 1, 'Male': 0}, inplace=True)
df1 = pd.get_dummies(data=df1, columns=['InternetService', 'Contract', 'PaymentMethod'])
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df1[['tenure', 'MonthlyCharges', 'TotalCharges']] = scaler.fit_transform(df1[['tenure', 'MonthlyCharges', 'TotalCharges']])
X = df1.drop('Churn', axis='columns')
y = df1['Churn']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
model = LogisticRegression()
model.fit(X_train, y_train)
y_pred = model.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
cm = confusion_matrix(y_test, y_pred)
plt.figure(figsize=(10, 7))
sn.heatmap(cm, annot=True, fmt='d')
plt.xlabel('Predicted')
plt.ylabel('Truth')
plt.title("Confusion Matrix")
plt.show()
report = classification_report(y_test, y_pred)
print("Classification Report:")
print(report)